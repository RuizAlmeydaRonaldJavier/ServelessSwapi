service: servelessswapi

frameworkVersion: "3"

plugins:
  - serverless-dynamodb
  - serverless-offline

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  timeout: 10
  environment:
    DYNAMODB_TABLE: ${self:service}-${sls:stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  getSwapi:
    handler: controllers/getSwapi.getSwapi
    events:
      - httpApi:
          path: swapi/personas/{query}
          method: get
          cors: true

  postSwapiDynamo:
    handler: controllers/postSwapiDynamo.postSwapiDynamo
    events:
      - httpApi:
          path: swapi/personas/
          method: post
          cors: true

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}